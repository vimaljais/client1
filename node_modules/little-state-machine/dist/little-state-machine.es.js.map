{"version":3,"file":"little-state-machine.es.js","sources":["../src/logic/storeFactory.ts","../src/constants.ts","../src/logic/getBrowserStoreData.ts","../src/StateMachineContext.tsx","../src/stateMachine.tsx","../src/logic/devTool.ts"],"sourcesContent":["import { STORE_DEFAULT_NAME } from '../constants';\nimport getStoreData from './getBrowserStoreData';\nimport { MiddleWare, GlobalState } from '../types';\n\nclass StoreFactory {\n  public storageType: Storage;\n  public state: GlobalState = {};\n  public middleWares: MiddleWare[] = [];\n\n  constructor(public name = STORE_DEFAULT_NAME) {\n    try {\n      this.storageType =\n        typeof sessionStorage !== 'undefined'\n          ? window.sessionStorage\n          : ({} as Storage);\n    } catch {\n      this.storageType = {} as Storage;\n    }\n  }\n\n  updateStore(defaultValues: GlobalState) {\n    this.state = getStoreData(this.storageType, this.name) || defaultValues;\n  }\n\n  updateMiddleWares(middleWares: MiddleWare[]) {\n    return (this.middleWares = middleWares);\n  }\n}\n\nexport default new StoreFactory();\n","export const STORE_DEFAULT_NAME = '__LSM__';\nexport const STORE_ACTION_NAME = '__LSM_NAME__';\n","export default (storageType: Storage, storeName: string) => {\n  try {\n    return JSON.parse(storageType.getItem(storeName) as string);\n  } catch {\n    return null;\n  }\n};\n","import * as React from 'react';\nimport storeFactory from './logic/storeFactory';\nimport { StateMachineContextValue } from './types';\n\nconst StateMachineContext = React.createContext<StateMachineContextValue>(undefined as any);\n\nexport const StateMachineProvider: React.FC = ({ children }) => {\n  const [state, setState] = React.useState(storeFactory.state);\n\n  return (\n    <StateMachineContext.Provider\n      value={{ state, setState }}\n    >\n      { children }\n    </StateMachineContext.Provider>\n  );\n}\n\nexport function useStateMachineContext() {\n  const value = React.useContext<StateMachineContextValue>(StateMachineContext);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!value) {\n      console.error(`StateMachine context is undefined, please verify you are calling useStateMachine() as child of a <StateMachineProvider> component.`)\n    }\n  }\n\n  return value;\n}","import * as React from 'react';\nimport { useStateMachineContext } from './StateMachineContext';\nimport storeFactory from './logic/storeFactory';\nimport { setUpDevTools } from './logic/devTool';\nimport {\n  StateMachineOptions,\n  GlobalState,\n  AnyCallback,\n  AnyActions,\n  ActionsOutput,\n} from './types';\nimport { STORE_ACTION_NAME, STORE_DEFAULT_NAME } from './constants';\n\nexport function createStore(\n  defaultState: GlobalState,\n  options: StateMachineOptions = {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [],\n  },\n) {\n  options.name && (storeFactory.name = options.name);\n  options.storageType && (storeFactory.storageType = options.storageType);\n  options.middleWares && storeFactory.updateMiddleWares(options.middleWares);\n\n  if (process.env.NODE_ENV !== 'production') {\n    setUpDevTools(\n      storeFactory.storageType,\n      storeFactory.name,\n      storeFactory.state,\n    );\n  }\n\n  storeFactory.updateStore(defaultState);\n}\n\nfunction actionTemplate<TCallback extends AnyCallback>(\n  setState: React.Dispatch<React.SetStateAction<GlobalState>>,\n  callback: TCallback,\n) {\n  return (payload: Parameters<TCallback>[1]) => {\n    if (process.env.NODE_ENV !== 'production') {\n      window[STORE_ACTION_NAME] = callback ? callback.name : '';\n    }\n\n    storeFactory.state = callback(storeFactory.state, payload);\n\n    storeFactory.storageType.setItem(\n      storeFactory.name,\n      JSON.stringify(storeFactory.state),\n    );\n\n    if (storeFactory.middleWares.length) {\n      storeFactory.state = storeFactory.middleWares.reduce(\n        (currentValue, currentFunction) =>\n          currentFunction(currentValue, callback.name, payload) || currentValue,\n        storeFactory.state,\n      );\n    }\n\n    setState(storeFactory.state);\n  };\n}\n\nexport function useStateMachine<\n  TCallback extends AnyCallback,\n  TActions extends AnyActions<TCallback>\n>(\n  actions?: TActions,\n): {\n  actions: ActionsOutput<TCallback, TActions>;\n  state: GlobalState;\n} {\n  const { state, setState } = useStateMachineContext();\n\n  return React.useMemo(\n    () => ({\n      actions: actions\n        ? Object.entries(actions).reduce(\n            (previous, [key, callback]) =>\n              Object.assign({}, previous, {\n                [key]: actionTemplate(setState, callback),\n              }),\n            {},\n          )\n        : ({} as any),\n      state,\n    }),\n    [state, setState, actions],\n  );\n}\n","import { GlobalState } from \"../types\";\n\nexport function setUpDevTools(\n  storageType: Storage,\n  name: string,\n  state: GlobalState,\n) {\n  if (typeof window === 'undefined') return;\n\n  window.__LSM__ = name;\n\n  window.__LSM_NAME__ = name;\n\n  window.__LSM_DEBUG__ = (value: string) =>\n    storageType.setItem('___LSM_DEBUG__', value);\n\n  window.__LSM_RESET__ = () => storageType.removeItem(name);\n\n  window.__LSM_GET_STORE__ = () => storageType.getItem(name);\n\n  window.__LSM_SAVE_TO__ = (name: any) =>\n    window.localStorage.setItem(name, JSON.stringify(state));\n\n  window.__LSM_LOAD__ = ({\n    storeName,\n    data,\n  }: {\n    storeName: string;\n    data?: string;\n  }) =>\n    storageType.setItem(\n      name || '___LSM_DEBUG__',\n      data || window.localStorage.getItem(storeName) || '',\n    );\n}\n"],"names":["name","this","storageType","sessionStorage","window","updateStore","defaultValues","state","storeName","JSON","parse","getItem","getStoreData","updateMiddleWares","middleWares","StateMachineContext","React","undefined","StateMachineProvider","children","storeFactory","Provider","value","setState","createStore","defaultState","options","process","env","NODE_ENV","__LSM__","__LSM_NAME__","__LSM_DEBUG__","setItem","__LSM_RESET__","removeItem","__LSM_GET_STORE__","__LSM_SAVE_TO__","localStorage","stringify","__LSM_LOAD__","data","useStateMachine","actions","console","error","Object","entries","reduce","previous","assign","callback","payload","length","currentValue","currentFunction","actionTemplate"],"mappings":"yHASE,WAAmBA,YAAAA,IAAAA,ECTa,WDSbC,UAAAD,EAHZC,WAAqB,GACrBA,iBAA4B,GAGjC,IACEA,KAAKC,YACuB,oBAAnBC,eACHC,OAAOD,eACN,GACP,SACAF,KAAKC,YAAc,+BAIvBG,YAAA,SAAYC,GACVL,KAAKM,eErBOL,EAAsBM,GACpC,IACE,OAAOC,KAAKC,MAAMR,EAAYS,QAAQH,IACtC,SACA,aFiBaI,CAAaX,KAAKC,YAAaD,KAAKD,OAASM,KAG5DO,kBAAA,SAAkBC,GAChB,YAAaA,YAAcA,SGrBzBC,EAAsBC,OAA8CC,GAE7DC,EAAiC,gBAAGC,IAAAA,WACrBH,EAAeI,EAAab,OAEtD,OACES,EAACD,EAAoBM,UACnBC,MAAO,CAAEf,WAAOgB,gBAEdJ,aCAQK,EACdC,EACAC,OCZAxB,EACAF,EACAO,WDUAmB,IAAAA,EAA+B,CAC7B1B,KHhB8B,UGiB9Bc,YAAa,KAGfY,EAAQ1B,OAASoB,EAAapB,KAAO0B,EAAQ1B,MAC7C0B,EAAQxB,cAAgBkB,EAAalB,YAAcwB,EAAQxB,aAC3DwB,EAAQZ,aAAeM,EAAaP,kBAAkBa,EAAQZ,aAEjC,eAAzBa,QAAQC,IAAIC,WCrBhB3B,EDuBIkB,EAAalB,YCtBjBF,EDuBIoB,EAAapB,KCtBjBO,EDuBIa,EAAab,MCrBK,oBAAXH,SAEXA,OAAO0B,QAAU9B,EAEjBI,OAAO2B,aAAe/B,EAEtBI,OAAO4B,cAAgB,SAACV,UACtBpB,EAAY+B,QAAQ,iBAAkBX,IAExClB,OAAO8B,cAAgB,kBAAMhC,EAAYiC,WAAWnC,IAEpDI,OAAOgC,kBAAoB,kBAAMlC,EAAYS,QAAQX,IAErDI,OAAOiC,gBAAkB,SAACrC,UACxBI,OAAOkC,aAAaL,QAAQjC,EAAMS,KAAK8B,UAAUhC,KAEnDH,OAAOoC,aAAe,mBAOpBtC,EAAY+B,QACVjC,GAAQ,mBANVyC,MAOUrC,OAAOkC,aAAa3B,UAR9BH,YAQoD,ODAtDY,EAAaf,YAAYoB,GA+B3B,SAAgBiB,EAIdC,ODhDMrB,KAAAA,EAAQN,EAA2CD,GAE5B,eAAzBY,QAAQC,IAAIC,WACTP,GACHsB,QAAQC,6IAILvB,GC6CCf,IAAAA,MAAOgB,IAAAA,SAEf,OAAOP,EACL,iBAAO,CACL2B,QAASA,EACLG,OAAOC,QAAQJ,GAASK,OACtB,SAACC,kBACCH,OAAOI,OAAO,GAAID,gBA5ChC,SACE1B,EACA4B,GAEA,gBAAQC,GACuB,eAAzBzB,QAAQC,IAAIC,WACdzB,OAAM,aAAsB+C,EAAWA,EAASnD,KAAO,IAGzDoB,EAAab,MAAQ4C,EAAS/B,EAAab,MAAO6C,GAElDhC,EAAalB,YAAY+B,QACvBb,EAAapB,KACbS,KAAK8B,UAAUnB,EAAab,QAG1Ba,EAAaN,YAAYuC,SAC3BjC,EAAab,MAAQa,EAAaN,YAAYkC,OAC5C,SAACM,EAAcC,UACbA,EAAgBD,EAAcH,EAASnD,KAAMoD,IAAYE,GAC3DlC,EAAab,QAIjBgB,EAASH,EAAab,QAqBHiD,CAAejC,aAE1B,IAED,GACLhB,MAAAA,IAEF,CAACA,EAAOgB,EAAUoB"}